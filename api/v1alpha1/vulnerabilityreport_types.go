/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	"github.com/aquasecurity/trivy-db/pkg/types"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
// NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.
// VulnerabilitySummary is a summary of Vulnerability counts grouped by Severity.
type VulnerabilitySummary struct {
	// CriticalCount is the number of vulnerabilities with Critical Severity.
	//+kubebuilder:validation:Minimum=0
	CriticalCount int `json:"criticalCount"`

	// HighCount is the number of vulnerabilities with High Severity.
	//+kubebuilder:validation:Minimum=0
	HighCount int `json:"highCount"`

	// MediumCount is the number of vulnerabilities with Medium Severity.
	//+kubebuilder:validation:Minimum=0
	MediumCount int `json:"mediumCount"`

	// LowCount is the number of vulnerabilities with Low Severity.
	//+kubebuilder:validation:Minimum=0
	LowCount int `json:"lowCount"`

	// UnknownCount is the number of vulnerabilities with unknown severity.
	//+kubebuilder:validation:Minimum=0
	UnknownCount int `json:"unknownCount"`

	// NoneCount is the number of packages without any vulnerability.
	//+kubebuilder:validation:Minimum=0
	//+optional
	NoneCount int `json:"noneCount"`
}

// VulnerabilityReportSpec defines the desired state of VulnerabilityReport
type VulnerabilityReportData struct {
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	// UpdateTimestamp is a timestamp representing the server time in UTC when this report was updated.
	// +kubebuilder:validation:Type=string
	// +kubebuilder:validation:Format=date-time
	UpdateTimestamp metav1.Time `json:"updateTimestamp"`

	// Scanner is the scanner that generated this report.
	Scanner Scanner `json:"scanner"`

	// Registry is the registry the Artifact was pulled from.
	//+optional
	Registry Registry `json:"registry"`

	// Artifact represents a standalone, executable package of software that includes everything needed to
	// run an application.
	Artifact Artifact `json:"artifact"`

	// Summary is a summary of Vulnerability counts grouped by Severity.
	Summary VulnerabilitySummary `json:"summary"`

	// Vulnerabilities is a list of operating system (OS) or application software Vulnerability items found in the Artifact.
	Vulnerabilities []Vulnerability `json:"vulnerabilities"`
}

// Registry is a collection of repositories used to store Artifacts.
type Registry struct {
	// Server the FQDN of registry server.
	//+optional
	Server string `json:"server"`
}

// Artifact represents a standalone, executable package of software that
// includes everything needed to run an application.
type Artifact struct {
	// Repository is the name of the repository in the Artifact registry.
	//+optional
	Repository string `json:"repository"`

	// Digest is a unique and immutable identifier of an Artifact.
	//+optional
	Digest string `json:"digest,omitempty"`

	// Tag is a mutable, human-readable string used to identify an Artifact.
	//+optional
	Tag string `json:"tag,omitempty"`

	// MimeType represents a type and format of an Artifact.
	//+optional
	MimeType string `json:"mimeType,omitempty"`
}

// Vulnerability is the spec for a vulnerability record.
type Vulnerability struct {
	// VulnerabilityID the vulnerability identifier.
	VulnerabilityID string `json:"vulnerabilityID"`

	// Resource is a vulnerable package, application, or library.
	Resource string `json:"resource"`

	// InstalledVersion indicates the installed version of the Resource.
	InstalledVersion string `json:"installedVersion"`

	// FixedVersion indicates the version of the Resource in which this vulnerability has been fixed.
	FixedVersion string `json:"fixedVersion"`

	// Severity level of a vulnerability or a configuration audit check.
	//+kubebuilder:validation:Enum={CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN}
	Severity    Severity `json:"severity"`
	Title       string   `json:"title"`
	Description string   `json:"description,omitempty"`
	CVSSSource  string   `json:"cvsssource,omitempty"`
	PrimaryLink string   `json:"primaryLink,omitempty"`
	//+optional
	Links []string `json:"links"`
	Score *float64 `json:"score,omitempty"`
	//+optional
	Target string `json:"target"`
	//+optional
	CVSS types.VendorCVSS `json:"cvss,omitempty"`
	//+optional
	Class string `json:"class"`
}

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status

// VulnerabilityReport is the Schema for the vulnerabilityreports API
type VulnerabilityReport struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Report VulnerabilityReportData `json:"report"`
}

//+kubebuilder:object:root=true

// VulnerabilityReportList contains a list of VulnerabilityReport
type VulnerabilityReportList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VulnerabilityReport `json:"items"`
}

func init() {
	SchemeBuilder.Register(&VulnerabilityReport{}, &VulnerabilityReportList{})
}
